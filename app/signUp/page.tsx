"use client";
import React from 'react';
import Head from 'next/head';
import { app,firestore } from '../../firebaseConfig';
import { getAuth, createUserWithEmailAndPassword, GoogleAuthProvider, GithubAuthProvider, signInWithPopup } from 'firebase/auth';
import { useState } from 'react';
import { toast } from "react-toastify";
import { doc, setDoc } from "firebase/firestore";

const Register: React.FC = () => {
    const auth = getAuth(app);
    const googleProvider = new GoogleAuthProvider();
    const githubProvider = new GithubAuthProvider();

    const [username, setUsername] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    
    const  signUp =  () => {
        if(!email || !password){
            alert("all feilds are required")
        }else{
            createUserWithEmailAndPassword(auth, email, password)
            .then(async (response) => {
                //console.log(response.user);
                const userData = {
                    uid: response.user.uid,
                    email:email,
                    displayName: username,
                    createdAt: Date.now(),
                    updatedAt: Date.now(),
                    solvedProblems: [],
                    solvedprob: {
                        easy: 1,
                        medium: 0,
                        hard: 0,
                      }
                };
                await setDoc(doc(firestore, "users", response.user.uid), userData);
                //console.log(userData);
                window.location.href = '/'; 
            })
            .catch((err)=>{
                alert("failed to signUp with email and password")
            })
        }
        
    }

    const signUpWithGoogle = () => {
        signInWithPopup(auth, googleProvider)
            .then(async (response) => {
                const userData = {
                    uid: response.user.uid,
                    email:response.user.email,
                    displayName: response.user.displayName,
                    createdAt: Date.now(),
                    updatedAt: Date.now(),
                    solvedProblems: [],
                    solvedprob: {
                        easy: 1,
                        medium: 0,
                        hard: 0,
                      }
                };
                await setDoc(doc(firestore, "users", response.user.uid), userData);
                window.location.href = '/';
            })
            .catch((err)=>{
                alert("failed to signUp with google")
            })
            
    }

    const signUpWithGithub = () => {
        signInWithPopup(auth, githubProvider)
            .then(async (response) => {
                const userData = {
                    uid: response.user.uid,
                    email:response.user.email,
                    displayName: response.user.displayName,
                    createdAt: Date.now(),
                    updatedAt: Date.now(),
                    solvedProblems: [],
                    solvedprob: {
                        easy: 1,
                        medium: 0,
                        hard: 0,
                      }
                };
                await setDoc(doc(firestore, "users", response.user.uid), userData);
                window.location.href = '/';
            })
            .catch(err => {
                alert('failed to signUp with Github');
            })
    }

    return (
        <div className="flex items-center justify-center">
            <Head>
                <title>Next CRUD AUTH</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className="bg-gray-200 p-8 rounded-lg shadow-md w-96">
                <h1 className="text-3xl font-semibold text-center text-orange-500 mb-6">Register</h1>

                <input
                    className="w-full p-2 rounded border border-gray-300 mb-4"
                    placeholder='Username'
                    onChange={(event) => setUsername(event.target.value)}
                    value={username}
                    type='text'
                />


                <input
                    className="w-full p-2 rounded border border-gray-300 mb-4"
                    placeholder='Email'
                    onChange={(event) => setEmail(event.target.value)}
                    value={email}
                    type='email'
                />
                <input
                    className="w-full p-2 rounded border border-gray-300 mb-4"
                    placeholder='Password'
                    onChange={(event) => setPassword(event.target.value)}
                    value={password}
                    type='password'
                />

                <button
                    className="w-full bg-orange-500 text-white py-2 rounded transition duration-300 hover:bg-orange-600"
                    onClick={signUp}
                >
                    Sign Up
                </button>

                <hr className="my-4 border-t border-gray-300" />

                <button
                    className="w-full bg-red-500 text-white py-2 rounded transition duration-300 hover-bg-red-600"
                    onClick={signUpWithGoogle}
                >
                    Sign Up with Google
                </button>

                <hr className="my-4 border-t border-gray-300" />

                <button
                    className="w-full bg-black text-white py-2 rounded transition duration-300 hover:bg-black"
                    onClick={signUpWithGithub}
                >
                    Sign Up with Github
                </button>
            </main>
        </div>
    )
}

export default Register;
