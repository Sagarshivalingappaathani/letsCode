"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/problems/[id]/page",{

/***/ "(app-pages-browser)/./data/Problems/no-island.ts":
/*!************************************!*\
  !*** ./data/Problems/no-island.ts ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   noIsland: function() { return /* binding */ noIsland; }\n/* harmony export */ });\nconst intialcode = [\n    {\n        id: 1,\n        name: \"#include <stdio.h>\\n\t\t\t  #include <bits/stdc++.h>\\n\t\t\t  using namespace std;\"\n    },\n    {\n        id: 2,\n        name: 'import java.util.Scanner;\\n\\n        public class Main {\\n            public static void main(String[] args) {\\n                Scanner scanner = new Scanner(System.in);\\n                int tc = scanner.nextInt();\\n                while (tc-- > 0) {\\n                    int n = scanner.nextInt();\\n                    int m = scanner.nextInt();\\n                    int[][] grid = new int[n][m];\\n                    for (int i = 0; i < n; i++) {\\n                        for (int j = 0; j < m; j++) {\\n                            grid[i][j] = scanner.nextInt();\\n                        }\\n                    }\\n                    Solution obj = new Solution();\\n                    int ans = obj.numIslands(grid);\\n                    System.out.print(ans+\" \");\\n                }\\n            }\\n        }'\n    }\n];\nconst endingcode = [\n    {\n        id: 1,\n        name: \"\\n        int main() {\\n            int tc;\\n            cin >> tc;\\n            while (tc--) {\\n                int n, m;\\n                cin >> n >> m;\\n                vector<vector<char>> grid(n, vector<char>(m, '#'));\\n                for (int i = 0; i < n; i++) {\\n                    for (int j = 0; j < m; j++) {\\n                        cin >> grid[i][j];\\n                    }\\n                }\\n                Solution obj;\\n                int ans = obj.numIslands(grid);\\n                cout << ans << \\\" \\\";\\n            }\\n            return 0;\\n        }\\n        \"\n    },\n    {\n        id: 2,\n        name: \"\"\n    }\n];\nconst boilercode = [\n    {\n        id: 1,\n        name: \"class Solution {\\n    public:\\n      // Function to find the number of islands.\\n      int numIslands(vector<vector<char>>& grid) {\\n          // Code here\\n      }\\n};\"\n    },\n    {\n        id: 2,\n        name: \"class Solution {\\n    // Function to find the number of islands.\\n    public int numIslands(char[][] grid) {\\n        // Code here\\n    }\\n}\"\n    }\n];\nconst solutioncode = [\n    {\n        id: 1,\n        name: \"class Solution {\\n    private:\\n      void dfs(int row,int col,vector<vector<int>>&vis,\\n        vector<vector<char>>&grid){\\n          vis[row][col] = 1;\\n          int n = grid.size();\\n          int m = grid[0].size();\\n          for(int p = -1; p <= 1; p++){\\n              int nrow = row + p;\\n              for(int q = -1; q <= 1; q++){\\n                  int ncol = col + q;\\n                  if(nrow >= 0 && nrow < n && ncol >= 0\\n                     && ncol < m &&grid[nrow][ncol] == '1'\\n                      && vis[nrow][ncol] == 0){\\n                      dfs(nrow,ncol,vis,grid);\\n                  }\\n              }\\n          }\\n      }\\n    public:\\n      // Function to find the number of islands.\\n      int numIslands(vector<vector<char>>& grid) {\\n          // Code here\\n          int row = grid.size();\\n          int col = grid[0].size();\\n          int count = 0;\\n          vector<vector<int>>vis(row,vector<int>(col,0));\\n          for(int i = 0; i < row; ++i){\\n              for(int j = 0; j < col; ++j){\\n                  if(!vis[i][j] && grid[i][j] == '1'){\\n                      count++;\\n                      dfs(i,j,vis,grid);\\n                  }\\n              }\\n          }\\n          return count;\\n      }\\n  };\"\n    },\n    {\n        id: 2,\n        name: \"class Solution {\\n    \\n    static class Pair {\\n        int r;\\n        int c;\\n\\n        Pair(int r, int c) {\\n            this.r = r;\\n            this.c = c;\\n        }\\n    }\\n\\n    static void bfs(int i, int j, char grid[][], int vis[][]) {\\n        int n = grid.length;\\n        int m = grid[0].length;\\n\\n        vis[i][j] = 1;\\n        Queue<Pair> q = new LinkedList<>();\\n        q.add(new Pair(i, j));\\n\\n        while (!q.isEmpty()) {\\n            int row = q.peek().r;\\n            int col = q.peek().c;\\n            q.remove();\\n\\n            for (int r = -1; r <= 1; r++) {\\n                for (int c = -1; c <= 1; c++) {\\n                    int newrow = row + r;\\n                    int newcol = col + c;\\n\\n                    if (newrow >= 0 && newrow < n && newcol >= 0\\n                    && newcol < m && grid[newrow][newcol] == '1' \\n                        && vis[newrow][newcol] == 0) {\\n                        q.add(new Pair(newrow, newcol));\\n                        vis[newrow][newcol] = 1;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    \\n    public int numIslands(char[][] grid) {\\n        int n = grid.length;\\n        int m = grid[0].length;\\n\\n        int vis[][] = new int[n][m];\\n        int ans = 0;\\n\\n        for (int i = 0; i < n; i++) {\\n            for (int j = 0; j < m; j++) {\\n                if (grid[i][j] == '1' && vis[i][j] == 0) {\\n                    ans++;\\n                    bfs(i, j, grid, vis);\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n}\"\n    }\n];\nconst noIsland = {\n    id: \"no-island\",\n    title: \"5 Find the number of islands\",\n    problemStatement: \"<div class=\\\"mt-1\\\">\\n    <p>\\n      The task is to find the number of islands in a grid, where each cell can be either '0' (representing water) or '1' (representing land). An island is defined as a group of '1's connected both horizontally and vertically, either directly or diagonally. It may be surrounded by water or the boundary of the grid. In other words, islands are contiguous regions of land that are separated from other land or surrounded by water.\\n    </p>\\n  </div>\\n  \\n  <div class=\\\"mt-3\\\">\\n    <p>\\n      To solve this problem, you can implement an algorithm that explores the grid, identifies land cells ('1's), and groups them into islands. The goal is to count the total number of such islands.\\n    </p>\\n  </div>\\n  \\n  <div class=\\\"mt-3\\\">\\n    <p class=\\\"note\\\">\\n      Note: Ensure that when identifying islands, you consider connections in all 8 directions, including horizontally, vertically, and diagonally. Also, an island can be located both in the interior of the grid and along its boundary.\\n    </p>\\n  </div>\\n  \",\n    examples: [\n        {\n            id: 1,\n            inputText: \"grid = {{0,1},{1,0},{1,1},{1,0}}\",\n            outputText: \" Output: 1 \"\n        },\n        {\n            id: 2,\n            inputText: \"grid = {{0,1,1,1,0,0,0},{0,0,1,1,0,1,0}}\",\n            outputText: \"Output: 2\"\n        }\n    ],\n    constraints: '<div className=\"mt-4\">\\n\t\t\t\t<ul>\\n\t\t\t\t<li className=\"mt-2\">\\n\t\t\t\t\t<code>Expected Time Complexity: O(n*m)</code>\\n\t\t\t\t</li>\\n\t\t\t\t<li className=\"mt-2\">\\n\t\t\t\t\t<code>Expected Auxiliary Space: O(n*m)</code>\\n\t\t\t\t</li>\\n\t\t\t\t<li className=\"mt-2\">\\n\t\t\t\t\t<code>1 ≤ n,m ≤ 500</code>\\n\t\t\t\t</li>\\n\t\t\t\t</ul>\\n\t\t\t</div>',\n    starterCode: boilercode,\n    intialcode: intialcode,\n    endingcode: endingcode,\n    solutioncode: solutioncode,\n    inuputs: \"2 4 2 0 1 1 0 1 1 1 0 2 7 0 1 1 1 0 0 0 0 0 1 1 0 1 0\",\n    output: \"1 2 \",\n    order: 5,\n    difficulty: \"Hard\",\n    tag: [\n        {\n            id: 1,\n            name: \"DFs\"\n        },\n        {\n            id: 2,\n            name: \"Graph\"\n        },\n        {\n            id: 3,\n            name: \"Data Structures\"\n        }\n    ],\n    companies: [\n        {\n            id: 1,\n            name: \"Uber\"\n        },\n        {\n            id: 2,\n            name: \"Google\"\n        },\n        {\n            id: 3,\n            name: \"Swiggy\"\n        }\n    ],\n    averagetime: \"25m\"\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./data/Problems/no-island.ts\n"));

/***/ })

});