"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/problems/[id]/page",{

/***/ "(app-pages-browser)/./utils/Problems/two-sum.ts":
/*!***********************************!*\
  !*** ./utils/Problems/two-sum.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   twoSum: function() { return /* binding */ twoSum; }\n/* harmony export */ });\n/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! assert */ \"(app-pages-browser)/./node_modules/assert/build/assert.js\");\n/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(assert__WEBPACK_IMPORTED_MODULE_0__);\n\nconst starterCodeTwoSum = \"function twoSum(nums,target){\\n  // Write your code here\\n};\";\n// checks if the user has the correct code\nconst handlerTwoSum = (fn)=>{\n    // fn is the callback that user's code is passed into\n    try {\n        const nums = [\n            [\n                2,\n                7,\n                11,\n                15\n            ],\n            [\n                3,\n                2,\n                4\n            ],\n            [\n                3,\n                3\n            ]\n        ];\n        const targets = [\n            9,\n            6,\n            6\n        ];\n        const answers = [\n            [\n                0,\n                1\n            ],\n            [\n                1,\n                2\n            ],\n            [\n                0,\n                1\n            ]\n        ];\n        // loop all tests to check if the user's code is correct\n        for(let i = 0; i < nums.length; i++){\n            // result is the output of the user's function and answer is the expected output\n            const result = fn(nums[i], targets[i]);\n            assert__WEBPACK_IMPORTED_MODULE_0___default().deepStrictEqual(result, answers[i]);\n        }\n        return true;\n    } catch (error) {\n        console.log(\"twoSum handler function error\");\n        throw new Error(error);\n    }\n};\nconst twoSum = {\n    id: \"two-sum\",\n    title: \"1. Two Sum\",\n    problemStatement: \"<p class='mt-3'>\\n  Given an array of integers <code>nums</code> and an integer <code>target</code>, return\\n  <em>indices of the two numbers such that they add up to</em> <code>target</code>.\\n</p>\\n<p class='mt-3'>\\n  You may assume that each input would have <strong>exactly one solution</strong>, and you\\n  may not use thesame element twice.\\n</p>\\n<p class='mt-3'>You can return the answer in any order.</p>\",\n    examples: [\n        {\n            id: 1,\n            inputText: \"nums = [2,7,11,15], target = 9\",\n            outputText: \"[0,1]\",\n            explanation: \"Because nums[0] + nums[1] == 9, we return [0, 1].\"\n        },\n        {\n            id: 2,\n            inputText: \"nums = [3,2,4], target = 6\",\n            outputText: \"[1,2]\",\n            explanation: \"Because nums[1] + nums[2] == 6, we return [1, 2].\"\n        },\n        {\n            id: 3,\n            inputText: \" nums = [3,3], target = 6\",\n            outputText: \"[0,1]\"\n        }\n    ],\n    constraints: \"<li class='mt-2'>\\n  <code>2 ≤ nums.length ≤ 10</code>\\n</li> <li class='mt-2'>\\n<code>-10 ≤ nums[i] ≤ 10</code>\\n</li> <li class='mt-2'>\\n<code>-10 ≤ target ≤ 10</code>\\n</li>\\n<li class='mt-2 text-sm'>\\n<strong>Only one valid answer exists.</strong>\\n</li>\",\n    handlerFunction: handlerTwoSum,\n    starterCode: starterCodeTwoSum,\n    order: 1,\n    starterFunctionName: \"function twoSum(\",\n    difficulty: \"\"\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3V0aWxzL1Byb2JsZW1zL3R3by1zdW0udHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTRCO0FBRzVCLE1BQU1DLG9CQUFxQjtBQUkzQiwwQ0FBMEM7QUFDMUMsTUFBTUMsZ0JBQWdCLENBQUNDO0lBQ3RCLHFEQUFxRDtJQUNyRCxJQUFJO1FBQ0gsTUFBTUMsT0FBTztZQUNaO2dCQUFDO2dCQUFHO2dCQUFHO2dCQUFJO2FBQUc7WUFDZDtnQkFBQztnQkFBRztnQkFBRzthQUFFO1lBQ1Q7Z0JBQUM7Z0JBQUc7YUFBRTtTQUNOO1FBRUQsTUFBTUMsVUFBVTtZQUFDO1lBQUc7WUFBRztTQUFFO1FBQ3pCLE1BQU1DLFVBQVU7WUFDZjtnQkFBQztnQkFBRzthQUFFO1lBQ047Z0JBQUM7Z0JBQUc7YUFBRTtZQUNOO2dCQUFDO2dCQUFHO2FBQUU7U0FDTjtRQUVELHdEQUF3RDtRQUN4RCxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUgsS0FBS0ksTUFBTSxFQUFFRCxJQUFLO1lBQ3JDLGdGQUFnRjtZQUNoRixNQUFNRSxTQUFTTixHQUFHQyxJQUFJLENBQUNHLEVBQUUsRUFBRUYsT0FBTyxDQUFDRSxFQUFFO1lBQ3JDUCw2REFBc0IsQ0FBQ1MsUUFBUUgsT0FBTyxDQUFDQyxFQUFFO1FBQzFDO1FBRUEsT0FBTztJQUNSLEVBQUUsT0FBT0ksT0FBWTtRQUNwQkMsUUFBUUMsR0FBRyxDQUFDO1FBQ1osTUFBTSxJQUFJQyxNQUFNSDtJQUNqQjtBQUNEO0FBRU8sTUFBTUksU0FBa0I7SUFDOUJDLElBQUk7SUFDSkMsT0FBTztJQUNQQyxrQkFBbUI7SUFTbkJDLFVBQVU7UUFDVDtZQUNDSCxJQUFJO1lBQ0pJLFdBQVc7WUFDWEMsWUFBWTtZQUNaQyxhQUFhO1FBQ2Q7UUFDQTtZQUNDTixJQUFJO1lBQ0pJLFdBQVc7WUFDWEMsWUFBWTtZQUNaQyxhQUFhO1FBQ2Q7UUFDQTtZQUNDTixJQUFJO1lBQ0pJLFdBQVc7WUFDWEMsWUFBWTtRQUNiO0tBQ0E7SUFDREUsYUFBYztJQVVkQyxpQkFBaUJ0QjtJQUNqQnVCLGFBQWF4QjtJQUNieUIsT0FBTztJQUNQQyxxQkFBcUI7SUFDckJDLFlBQVk7QUFDYixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3V0aWxzL1Byb2JsZW1zL3R3by1zdW0udHM/NTRjNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIjtcclxuaW1wb3J0IHsgUHJvYmxlbSB9IGZyb20gXCIuLi90eXBlcy9wcm9ibGVtXCI7XHJcblxyXG5jb25zdCBzdGFydGVyQ29kZVR3b1N1bSA9IGBmdW5jdGlvbiB0d29TdW0obnVtcyx0YXJnZXQpe1xyXG4gIC8vIFdyaXRlIHlvdXIgY29kZSBoZXJlXHJcbn07YDtcclxuXHJcbi8vIGNoZWNrcyBpZiB0aGUgdXNlciBoYXMgdGhlIGNvcnJlY3QgY29kZVxyXG5jb25zdCBoYW5kbGVyVHdvU3VtID0gKGZuOiBhbnkpID0+IHtcclxuXHQvLyBmbiBpcyB0aGUgY2FsbGJhY2sgdGhhdCB1c2VyJ3MgY29kZSBpcyBwYXNzZWQgaW50b1xyXG5cdHRyeSB7XHJcblx0XHRjb25zdCBudW1zID0gW1xyXG5cdFx0XHRbMiwgNywgMTEsIDE1XSxcclxuXHRcdFx0WzMsIDIsIDRdLFxyXG5cdFx0XHRbMywgM10sXHJcblx0XHRdO1xyXG5cclxuXHRcdGNvbnN0IHRhcmdldHMgPSBbOSwgNiwgNl07XHJcblx0XHRjb25zdCBhbnN3ZXJzID0gW1xyXG5cdFx0XHRbMCwgMV0sXHJcblx0XHRcdFsxLCAyXSxcclxuXHRcdFx0WzAsIDFdLFxyXG5cdFx0XTtcclxuXHJcblx0XHQvLyBsb29wIGFsbCB0ZXN0cyB0byBjaGVjayBpZiB0aGUgdXNlcidzIGNvZGUgaXMgY29ycmVjdFxyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBudW1zLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdC8vIHJlc3VsdCBpcyB0aGUgb3V0cHV0IG9mIHRoZSB1c2VyJ3MgZnVuY3Rpb24gYW5kIGFuc3dlciBpcyB0aGUgZXhwZWN0ZWQgb3V0cHV0XHJcblx0XHRcdGNvbnN0IHJlc3VsdCA9IGZuKG51bXNbaV0sIHRhcmdldHNbaV0pO1xyXG5cdFx0XHRhc3NlcnQuZGVlcFN0cmljdEVxdWFsKHJlc3VsdCwgYW5zd2Vyc1tpXSk7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcclxuXHRcdGNvbnNvbGUubG9nKFwidHdvU3VtIGhhbmRsZXIgZnVuY3Rpb24gZXJyb3JcIik7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xyXG5cdH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCB0d29TdW06IFByb2JsZW0gPSB7XHJcblx0aWQ6IFwidHdvLXN1bVwiLFxyXG5cdHRpdGxlOiBcIjEuIFR3byBTdW1cIixcclxuXHRwcm9ibGVtU3RhdGVtZW50OiBgPHAgY2xhc3M9J210LTMnPlxyXG4gIEdpdmVuIGFuIGFycmF5IG9mIGludGVnZXJzIDxjb2RlPm51bXM8L2NvZGU+IGFuZCBhbiBpbnRlZ2VyIDxjb2RlPnRhcmdldDwvY29kZT4sIHJldHVyblxyXG4gIDxlbT5pbmRpY2VzIG9mIHRoZSB0d28gbnVtYmVycyBzdWNoIHRoYXQgdGhleSBhZGQgdXAgdG88L2VtPiA8Y29kZT50YXJnZXQ8L2NvZGU+LlxyXG48L3A+XHJcbjxwIGNsYXNzPSdtdC0zJz5cclxuICBZb3UgbWF5IGFzc3VtZSB0aGF0IGVhY2ggaW5wdXQgd291bGQgaGF2ZSA8c3Ryb25nPmV4YWN0bHkgb25lIHNvbHV0aW9uPC9zdHJvbmc+LCBhbmQgeW91XHJcbiAgbWF5IG5vdCB1c2UgdGhlc2FtZSBlbGVtZW50IHR3aWNlLlxyXG48L3A+XHJcbjxwIGNsYXNzPSdtdC0zJz5Zb3UgY2FuIHJldHVybiB0aGUgYW5zd2VyIGluIGFueSBvcmRlci48L3A+YCxcclxuXHRleGFtcGxlczogW1xyXG5cdFx0e1xyXG5cdFx0XHRpZDogMSxcclxuXHRcdFx0aW5wdXRUZXh0OiBcIm51bXMgPSBbMiw3LDExLDE1XSwgdGFyZ2V0ID0gOVwiLFxyXG5cdFx0XHRvdXRwdXRUZXh0OiBcIlswLDFdXCIsXHJcblx0XHRcdGV4cGxhbmF0aW9uOiBcIkJlY2F1c2UgbnVtc1swXSArIG51bXNbMV0gPT0gOSwgd2UgcmV0dXJuIFswLCAxXS5cIixcclxuXHRcdH0sXHJcblx0XHR7XHJcblx0XHRcdGlkOiAyLFxyXG5cdFx0XHRpbnB1dFRleHQ6IFwibnVtcyA9IFszLDIsNF0sIHRhcmdldCA9IDZcIixcclxuXHRcdFx0b3V0cHV0VGV4dDogXCJbMSwyXVwiLFxyXG5cdFx0XHRleHBsYW5hdGlvbjogXCJCZWNhdXNlIG51bXNbMV0gKyBudW1zWzJdID09IDYsIHdlIHJldHVybiBbMSwgMl0uXCIsXHJcblx0XHR9LFxyXG5cdFx0e1xyXG5cdFx0XHRpZDogMyxcclxuXHRcdFx0aW5wdXRUZXh0OiBcIiBudW1zID0gWzMsM10sIHRhcmdldCA9IDZcIixcclxuXHRcdFx0b3V0cHV0VGV4dDogXCJbMCwxXVwiLFxyXG5cdFx0fSxcclxuXHRdLFxyXG5cdGNvbnN0cmFpbnRzOiBgPGxpIGNsYXNzPSdtdC0yJz5cclxuICA8Y29kZT4yIOKJpCBudW1zLmxlbmd0aCDiiaQgMTA8L2NvZGU+XHJcbjwvbGk+IDxsaSBjbGFzcz0nbXQtMic+XHJcbjxjb2RlPi0xMCDiiaQgbnVtc1tpXSDiiaQgMTA8L2NvZGU+XHJcbjwvbGk+IDxsaSBjbGFzcz0nbXQtMic+XHJcbjxjb2RlPi0xMCDiiaQgdGFyZ2V0IOKJpCAxMDwvY29kZT5cclxuPC9saT5cclxuPGxpIGNsYXNzPSdtdC0yIHRleHQtc20nPlxyXG48c3Ryb25nPk9ubHkgb25lIHZhbGlkIGFuc3dlciBleGlzdHMuPC9zdHJvbmc+XHJcbjwvbGk+YCxcclxuXHRoYW5kbGVyRnVuY3Rpb246IGhhbmRsZXJUd29TdW0sXHJcblx0c3RhcnRlckNvZGU6IHN0YXJ0ZXJDb2RlVHdvU3VtLFxyXG5cdG9yZGVyOiAxLFxyXG5cdHN0YXJ0ZXJGdW5jdGlvbk5hbWU6IFwiZnVuY3Rpb24gdHdvU3VtKFwiLFxyXG5cdGRpZmZpY3VsdHk6IFwiXCJcclxufTsiXSwibmFtZXMiOlsiYXNzZXJ0Iiwic3RhcnRlckNvZGVUd29TdW0iLCJoYW5kbGVyVHdvU3VtIiwiZm4iLCJudW1zIiwidGFyZ2V0cyIsImFuc3dlcnMiLCJpIiwibGVuZ3RoIiwicmVzdWx0IiwiZGVlcFN0cmljdEVxdWFsIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwiRXJyb3IiLCJ0d29TdW0iLCJpZCIsInRpdGxlIiwicHJvYmxlbVN0YXRlbWVudCIsImV4YW1wbGVzIiwiaW5wdXRUZXh0Iiwib3V0cHV0VGV4dCIsImV4cGxhbmF0aW9uIiwiY29uc3RyYWludHMiLCJoYW5kbGVyRnVuY3Rpb24iLCJzdGFydGVyQ29kZSIsIm9yZGVyIiwic3RhcnRlckZ1bmN0aW9uTmFtZSIsImRpZmZpY3VsdHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./utils/Problems/two-sum.ts\n"));

/***/ })

});