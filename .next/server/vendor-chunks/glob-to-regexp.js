/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/glob-to-regexp";
exports.ids = ["vendor-chunks/glob-to-regexp"];
exports.modules = {

/***/ "(ssr)/./node_modules/glob-to-regexp/index.js":
/*!**********************************************!*\
  !*** ./node_modules/glob-to-regexp/index.js ***!
  \**********************************************/
/***/ ((module) => {

eval("module.exports = function (glob, opts) {\n  if (typeof glob !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  var str = String(glob);\n\n  // The regexp we are building, as a string.\n  var reStr = \"\";\n\n  // Whether we are matching so called \"extended\" globs (like bash) and should\n  // support single character matching, matching ranges of characters, group\n  // matching, etc.\n  var extended = opts ? !!opts.extended : false;\n\n  // When globstar is _false_ (default), '/foo/*' is translated a regexp like\n  // '^\\/foo\\/.*$' which will match any string beginning with '/foo/'\n  // When globstar is _true_, '/foo/*' is translated to regexp like\n  // '^\\/foo\\/[^/]*$' which will match any string beginning with '/foo/' BUT\n  // which does not have a '/' to the right of it.\n  // E.g. with '/foo/*' these will match: '/foo/bar', '/foo/bar.txt' but\n  // these will not '/foo/bar/baz', '/foo/bar/baz.txt'\n  // Lastely, when globstar is _true_, '/foo/**' is equivelant to '/foo/*' when\n  // globstar is _false_\n  var globstar = opts ? !!opts.globstar : false;\n\n  // If we are doing extended matching, this boolean is true when we are inside\n  // a group (eg {*.html,*.js}), and false otherwise.\n  var inGroup = false;\n\n  // RegExp flags (eg \"i\" ) to pass in to RegExp constructor.\n  var flags = opts && typeof( opts.flags ) === \"string\" ? opts.flags : \"\";\n\n  var c;\n  for (var i = 0, len = str.length; i < len; i++) {\n    c = str[i];\n\n    switch (c) {\n    case \"/\":\n    case \"$\":\n    case \"^\":\n    case \"+\":\n    case \".\":\n    case \"(\":\n    case \")\":\n    case \"=\":\n    case \"!\":\n    case \"|\":\n      reStr += \"\\\\\" + c;\n      break;\n\n    case \"?\":\n      if (extended) {\n        reStr += \".\";\n\t    break;\n      }\n\n    case \"[\":\n    case \"]\":\n      if (extended) {\n        reStr += c;\n\t    break;\n      }\n\n    case \"{\":\n      if (extended) {\n        inGroup = true;\n\t    reStr += \"(\";\n\t    break;\n      }\n\n    case \"}\":\n      if (extended) {\n        inGroup = false;\n\t    reStr += \")\";\n\t    break;\n      }\n\n    case \",\":\n      if (inGroup) {\n        reStr += \"|\";\n\t    break;\n      }\n      reStr += \"\\\\\" + c;\n      break;\n\n    case \"*\":\n      // Move over all consecutive \"*\"'s.\n      // Also store the previous and next characters\n      var prevChar = str[i - 1];\n      var starCount = 1;\n      while(str[i + 1] === \"*\") {\n        starCount++;\n        i++;\n      }\n      var nextChar = str[i + 1];\n\n      if (!globstar) {\n        // globstar is disabled, so treat any number of \"*\" as one\n        reStr += \".*\";\n      } else {\n        // globstar is enabled, so determine if this is a globstar segment\n        var isGlobstar = starCount > 1                      // multiple \"*\"'s\n          && (prevChar === \"/\" || prevChar === undefined)   // from the start of the segment\n          && (nextChar === \"/\" || nextChar === undefined)   // to the end of the segment\n\n        if (isGlobstar) {\n          // it's a globstar, so match zero or more path segments\n          reStr += \"((?:[^/]*(?:\\/|$))*)\";\n          i++; // move over the \"/\"\n        } else {\n          // it's not a globstar, so only match one path segment\n          reStr += \"([^/]*)\";\n        }\n      }\n      break;\n\n    default:\n      reStr += c;\n    }\n  }\n\n  // When regexp 'g' flag is specified don't\n  // constrain the regular expression with ^ & $\n  if (!flags || !~flags.indexOf('g')) {\n    reStr = \"^\" + reStr + \"$\";\n  }\n\n  return new RegExp(reStr, flags);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ2xvYi10by1yZWdleHAvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQixZQUFZO0FBQzlCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxvQ0FBb0MsU0FBUztBQUM3Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2xldHNjb2RlLy4vbm9kZV9tb2R1bGVzL2dsb2ItdG8tcmVnZXhwL2luZGV4LmpzPzE4MDkiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZ2xvYiwgb3B0cykge1xuICBpZiAodHlwZW9mIGdsb2IgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYSBzdHJpbmcnKTtcbiAgfVxuXG4gIHZhciBzdHIgPSBTdHJpbmcoZ2xvYik7XG5cbiAgLy8gVGhlIHJlZ2V4cCB3ZSBhcmUgYnVpbGRpbmcsIGFzIGEgc3RyaW5nLlxuICB2YXIgcmVTdHIgPSBcIlwiO1xuXG4gIC8vIFdoZXRoZXIgd2UgYXJlIG1hdGNoaW5nIHNvIGNhbGxlZCBcImV4dGVuZGVkXCIgZ2xvYnMgKGxpa2UgYmFzaCkgYW5kIHNob3VsZFxuICAvLyBzdXBwb3J0IHNpbmdsZSBjaGFyYWN0ZXIgbWF0Y2hpbmcsIG1hdGNoaW5nIHJhbmdlcyBvZiBjaGFyYWN0ZXJzLCBncm91cFxuICAvLyBtYXRjaGluZywgZXRjLlxuICB2YXIgZXh0ZW5kZWQgPSBvcHRzID8gISFvcHRzLmV4dGVuZGVkIDogZmFsc2U7XG5cbiAgLy8gV2hlbiBnbG9ic3RhciBpcyBfZmFsc2VfIChkZWZhdWx0KSwgJy9mb28vKicgaXMgdHJhbnNsYXRlZCBhIHJlZ2V4cCBsaWtlXG4gIC8vICdeXFwvZm9vXFwvLiokJyB3aGljaCB3aWxsIG1hdGNoIGFueSBzdHJpbmcgYmVnaW5uaW5nIHdpdGggJy9mb28vJ1xuICAvLyBXaGVuIGdsb2JzdGFyIGlzIF90cnVlXywgJy9mb28vKicgaXMgdHJhbnNsYXRlZCB0byByZWdleHAgbGlrZVxuICAvLyAnXlxcL2Zvb1xcL1teL10qJCcgd2hpY2ggd2lsbCBtYXRjaCBhbnkgc3RyaW5nIGJlZ2lubmluZyB3aXRoICcvZm9vLycgQlVUXG4gIC8vIHdoaWNoIGRvZXMgbm90IGhhdmUgYSAnLycgdG8gdGhlIHJpZ2h0IG9mIGl0LlxuICAvLyBFLmcuIHdpdGggJy9mb28vKicgdGhlc2Ugd2lsbCBtYXRjaDogJy9mb28vYmFyJywgJy9mb28vYmFyLnR4dCcgYnV0XG4gIC8vIHRoZXNlIHdpbGwgbm90ICcvZm9vL2Jhci9iYXonLCAnL2Zvby9iYXIvYmF6LnR4dCdcbiAgLy8gTGFzdGVseSwgd2hlbiBnbG9ic3RhciBpcyBfdHJ1ZV8sICcvZm9vLyoqJyBpcyBlcXVpdmVsYW50IHRvICcvZm9vLyonIHdoZW5cbiAgLy8gZ2xvYnN0YXIgaXMgX2ZhbHNlX1xuICB2YXIgZ2xvYnN0YXIgPSBvcHRzID8gISFvcHRzLmdsb2JzdGFyIDogZmFsc2U7XG5cbiAgLy8gSWYgd2UgYXJlIGRvaW5nIGV4dGVuZGVkIG1hdGNoaW5nLCB0aGlzIGJvb2xlYW4gaXMgdHJ1ZSB3aGVuIHdlIGFyZSBpbnNpZGVcbiAgLy8gYSBncm91cCAoZWcgeyouaHRtbCwqLmpzfSksIGFuZCBmYWxzZSBvdGhlcndpc2UuXG4gIHZhciBpbkdyb3VwID0gZmFsc2U7XG5cbiAgLy8gUmVnRXhwIGZsYWdzIChlZyBcImlcIiApIHRvIHBhc3MgaW4gdG8gUmVnRXhwIGNvbnN0cnVjdG9yLlxuICB2YXIgZmxhZ3MgPSBvcHRzICYmIHR5cGVvZiggb3B0cy5mbGFncyApID09PSBcInN0cmluZ1wiID8gb3B0cy5mbGFncyA6IFwiXCI7XG5cbiAgdmFyIGM7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzdHIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjID0gc3RyW2ldO1xuXG4gICAgc3dpdGNoIChjKSB7XG4gICAgY2FzZSBcIi9cIjpcbiAgICBjYXNlIFwiJFwiOlxuICAgIGNhc2UgXCJeXCI6XG4gICAgY2FzZSBcIitcIjpcbiAgICBjYXNlIFwiLlwiOlxuICAgIGNhc2UgXCIoXCI6XG4gICAgY2FzZSBcIilcIjpcbiAgICBjYXNlIFwiPVwiOlxuICAgIGNhc2UgXCIhXCI6XG4gICAgY2FzZSBcInxcIjpcbiAgICAgIHJlU3RyICs9IFwiXFxcXFwiICsgYztcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBcIj9cIjpcbiAgICAgIGlmIChleHRlbmRlZCkge1xuICAgICAgICByZVN0ciArPSBcIi5cIjtcblx0ICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgY2FzZSBcIltcIjpcbiAgICBjYXNlIFwiXVwiOlxuICAgICAgaWYgKGV4dGVuZGVkKSB7XG4gICAgICAgIHJlU3RyICs9IGM7XG5cdCAgICBicmVhaztcbiAgICAgIH1cblxuICAgIGNhc2UgXCJ7XCI6XG4gICAgICBpZiAoZXh0ZW5kZWQpIHtcbiAgICAgICAgaW5Hcm91cCA9IHRydWU7XG5cdCAgICByZVN0ciArPSBcIihcIjtcblx0ICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgY2FzZSBcIn1cIjpcbiAgICAgIGlmIChleHRlbmRlZCkge1xuICAgICAgICBpbkdyb3VwID0gZmFsc2U7XG5cdCAgICByZVN0ciArPSBcIilcIjtcblx0ICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgY2FzZSBcIixcIjpcbiAgICAgIGlmIChpbkdyb3VwKSB7XG4gICAgICAgIHJlU3RyICs9IFwifFwiO1xuXHQgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICByZVN0ciArPSBcIlxcXFxcIiArIGM7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgXCIqXCI6XG4gICAgICAvLyBNb3ZlIG92ZXIgYWxsIGNvbnNlY3V0aXZlIFwiKlwiJ3MuXG4gICAgICAvLyBBbHNvIHN0b3JlIHRoZSBwcmV2aW91cyBhbmQgbmV4dCBjaGFyYWN0ZXJzXG4gICAgICB2YXIgcHJldkNoYXIgPSBzdHJbaSAtIDFdO1xuICAgICAgdmFyIHN0YXJDb3VudCA9IDE7XG4gICAgICB3aGlsZShzdHJbaSArIDFdID09PSBcIipcIikge1xuICAgICAgICBzdGFyQ291bnQrKztcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgICAgdmFyIG5leHRDaGFyID0gc3RyW2kgKyAxXTtcblxuICAgICAgaWYgKCFnbG9ic3Rhcikge1xuICAgICAgICAvLyBnbG9ic3RhciBpcyBkaXNhYmxlZCwgc28gdHJlYXQgYW55IG51bWJlciBvZiBcIipcIiBhcyBvbmVcbiAgICAgICAgcmVTdHIgKz0gXCIuKlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZ2xvYnN0YXIgaXMgZW5hYmxlZCwgc28gZGV0ZXJtaW5lIGlmIHRoaXMgaXMgYSBnbG9ic3RhciBzZWdtZW50XG4gICAgICAgIHZhciBpc0dsb2JzdGFyID0gc3RhckNvdW50ID4gMSAgICAgICAgICAgICAgICAgICAgICAvLyBtdWx0aXBsZSBcIipcIidzXG4gICAgICAgICAgJiYgKHByZXZDaGFyID09PSBcIi9cIiB8fCBwcmV2Q2hhciA9PT0gdW5kZWZpbmVkKSAgIC8vIGZyb20gdGhlIHN0YXJ0IG9mIHRoZSBzZWdtZW50XG4gICAgICAgICAgJiYgKG5leHRDaGFyID09PSBcIi9cIiB8fCBuZXh0Q2hhciA9PT0gdW5kZWZpbmVkKSAgIC8vIHRvIHRoZSBlbmQgb2YgdGhlIHNlZ21lbnRcblxuICAgICAgICBpZiAoaXNHbG9ic3Rhcikge1xuICAgICAgICAgIC8vIGl0J3MgYSBnbG9ic3Rhciwgc28gbWF0Y2ggemVybyBvciBtb3JlIHBhdGggc2VnbWVudHNcbiAgICAgICAgICByZVN0ciArPSBcIigoPzpbXi9dKig/OlxcL3wkKSkqKVwiO1xuICAgICAgICAgIGkrKzsgLy8gbW92ZSBvdmVyIHRoZSBcIi9cIlxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGl0J3Mgbm90IGEgZ2xvYnN0YXIsIHNvIG9ubHkgbWF0Y2ggb25lIHBhdGggc2VnbWVudFxuICAgICAgICAgIHJlU3RyICs9IFwiKFteL10qKVwiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZVN0ciArPSBjO1xuICAgIH1cbiAgfVxuXG4gIC8vIFdoZW4gcmVnZXhwICdnJyBmbGFnIGlzIHNwZWNpZmllZCBkb24ndFxuICAvLyBjb25zdHJhaW4gdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiB3aXRoIF4gJiAkXG4gIGlmICghZmxhZ3MgfHwgIX5mbGFncy5pbmRleE9mKCdnJykpIHtcbiAgICByZVN0ciA9IFwiXlwiICsgcmVTdHIgKyBcIiRcIjtcbiAgfVxuXG4gIHJldHVybiBuZXcgUmVnRXhwKHJlU3RyLCBmbGFncyk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/glob-to-regexp/index.js\n");

/***/ })

};
;